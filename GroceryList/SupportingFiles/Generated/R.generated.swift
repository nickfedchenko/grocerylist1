//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 104 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Add Item
      ///
      /// Key: AddItem
      ///
      /// Locales: en, ru
      var addItem: RswiftResources.StringResource { .init(key: "AddItem", tableName: "Localizable", source: source, developmentValue: "Add Item", comment: nil) }

      /// en translation: Add note, quantity (optional)
      ///
      /// Key: AddNote
      ///
      /// Locales: en, ru
      var addNote: RswiftResources.StringResource { .init(key: "AddNote", tableName: "Localizable", source: source, developmentValue: "Add note, quantity (optional)", comment: nil) }

      /// en translation: Add recipes to the collection and shopping list from the Internet
      ///
      /// Key: AddRecipes
      ///
      /// Locales: en, ru
      var addRecipes: RswiftResources.StringResource { .init(key: "AddRecipes", tableName: "Localizable", source: source, developmentValue: "Add recipes to the collection and shopping list from the Internet", comment: nil) }

      /// en translation: Added earlier
      ///
      /// Key: AddedEarlier
      ///
      /// Locales: en, ru
      var addedEarlier: RswiftResources.StringResource { .init(key: "AddedEarlier", tableName: "Localizable", source: source, developmentValue: "Added earlier", comment: nil) }

      /// en translation: Alcohol
      ///
      /// Key: Alcohol
      ///
      /// Locales: en, ru
      var alcohol: RswiftResources.StringResource { .init(key: "Alcohol", tableName: "Localizable", source: source, developmentValue: "Alcohol", comment: nil) }

      /// en translation: Alphabetical sorting
      ///
      /// Key: AlphabeticalSorted
      ///
      /// Locales: en, ru
      var alphabeticalSorted: RswiftResources.StringResource { .init(key: "AlphabeticalSorted", tableName: "Localizable", source: source, developmentValue: "Alphabetical sorting", comment: nil) }

      /// en translation: Automatic assignment  of categories to products and grouping
      ///
      /// Key: AutomaticSorting
      ///
      /// Locales: en, ru
      var automaticSorting: RswiftResources.StringResource { .init(key: "AutomaticSorting", tableName: "Localizable", source: source, developmentValue: "Automatic assignment \nof categories to products and grouping", comment: nil) }

      /// en translation: Back
      ///
      /// Key: Back
      ///
      /// Locales: en, ru
      var back: RswiftResources.StringResource { .init(key: "Back", tableName: "Localizable", source: source, developmentValue: "Back", comment: nil) }

      /// en translation: Bread and pastries
      ///
      /// Key: Bread
      ///
      /// Locales: en, ru
      var bread: RswiftResources.StringResource { .init(key: "Bread", tableName: "Localizable", source: source, developmentValue: "Bread and pastries", comment: nil) }

      /// en translation: Breakfast
      ///
      /// Key: Breakfast
      ///
      /// Locales: en, ru
      var breakfast: RswiftResources.StringResource { .init(key: "Breakfast", tableName: "Localizable", source: source, developmentValue: "Breakfast", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en, ru
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Category
      ///
      /// Key: Category
      ///
      /// Locales: en, ru
      var category: RswiftResources.StringResource { .init(key: "Category", tableName: "Localizable", source: source, developmentValue: "Category", comment: nil) }

      /// en translation: Choose the right plan for using the Shoppy
      ///
      /// Key: Choose the right plan
      ///
      /// Locales: en, ru
      var chooseTheRightPlan: RswiftResources.StringResource { .init(key: "Choose the right plan", tableName: "Localizable", source: source, developmentValue: "Choose the right plan for using the Shoppy", comment: nil) }

      /// en translation: Create
      ///
      /// Key: Create
      ///
      /// Locales: en, ru
      var create: RswiftResources.StringResource { .init(key: "Create", tableName: "Localizable", source: source, developmentValue: "Create", comment: nil) }

      /// en translation: CreateList
      ///
      /// Key: CreateList
      ///
      /// Locales: en, ru
      var createList: RswiftResources.StringResource { .init(key: "CreateList", tableName: "Localizable", source: source, developmentValue: "CreateList", comment: nil) }

      /// en translation: Create lists with one touch  Products are automatically  categorized.  No more running around the  supermarket
      ///
      /// Key: CreateLists
      ///
      /// Locales: en, ru
      var createLists: RswiftResources.StringResource { .init(key: "CreateLists", tableName: "Localizable", source: source, developmentValue: "Create lists with one touch \nProducts are automatically \ncategorized. \nNo more running around the \nsupermarket", comment: nil) }

      /// en translation: Sorting by creation date
      ///
      /// Key: DateSorted
      ///
      /// Locales: en, ru
      var dateSorted: RswiftResources.StringResource { .init(key: "DateSorted", tableName: "Localizable", source: source, developmentValue: "Sorting by creation date", comment: nil) }

      /// en translation: Dinner
      ///
      /// Key: Dinner
      ///
      /// Locales: en, ru
      var dinner: RswiftResources.StringResource { .init(key: "Dinner", tableName: "Localizable", source: source, developmentValue: "Dinner", comment: nil) }

      /// en translation: Do you like the app? Tell us!
      ///
      /// Key: DoYouLikeApp?
      ///
      /// Locales: en, ru
      var doYouLikeApp: RswiftResources.StringResource { .init(key: "DoYouLikeApp?", tableName: "Localizable", source: source, developmentValue: "Do you like the app? Tell us!", comment: nil) }

      /// en translation: Done
      ///
      /// Key: Done
      ///
      /// Locales: en, ru
      var done: RswiftResources.StringResource { .init(key: "Done", tableName: "Localizable", source: source, developmentValue: "Done", comment: nil) }

      /// en translation: Drinks
      ///
      /// Key: Drinks
      ///
      /// Locales: en, ru
      var drinks: RswiftResources.StringResource { .init(key: "Drinks", tableName: "Localizable", source: source, developmentValue: "Drinks", comment: nil) }

      /// en translation: Error
      ///
      /// Key: Error
      ///
      /// Locales: en, ru
      var error: RswiftResources.StringResource { .init(key: "Error", tableName: "Localizable", source: source, developmentValue: "Error", comment: nil) }

      /// en translation: Fish and seafood
      ///
      /// Key: Fish
      ///
      /// Locales: en, ru
      var fish: RswiftResources.StringResource { .init(key: "Fish", tableName: "Localizable", source: source, developmentValue: "Fish and seafood", comment: nil) }

      /// en translation: Frozen foods
      ///
      /// Key: Frozen
      ///
      /// Locales: en, ru
      var frozen: RswiftResources.StringResource { .init(key: "Frozen", tableName: "Localizable", source: source, developmentValue: "Frozen foods", comment: nil) }

      /// en translation: Fruits and vegetables
      ///
      /// Key: FruitsAndVegetables
      ///
      /// Locales: en, ru
      var fruitsAndVegetables: RswiftResources.StringResource { .init(key: "FruitsAndVegetables", tableName: "Localizable", source: source, developmentValue: "Fruits and vegetables", comment: nil) }

      /// en translation: Grocery
      ///
      /// Key: Grocery
      ///
      /// Locales: en, ru
      var grocery: RswiftResources.StringResource { .init(key: "Grocery", tableName: "Localizable", source: source, developmentValue: "Grocery", comment: nil) }

      /// en translation: Grocery List
      ///
      /// Key: Grocery List
      ///
      /// Locales: en, ru
      var groceryList: RswiftResources.StringResource { .init(key: "Grocery List", tableName: "Localizable", source: source, developmentValue: "Grocery List", comment: nil) }

      /// en translation: Grocery Lists
      ///
      /// Key: Grocery Lists
      ///
      /// Locales: en, ru
      var groceryLists: RswiftResources.StringResource { .init(key: "Grocery Lists", tableName: "Localizable", source: source, developmentValue: "Grocery Lists", comment: nil) }

      /// en translation: Haptic Feedback
      ///
      /// Key: Haptic Feedback
      ///
      /// Locales: en, ru
      var hapticFeedback: RswiftResources.StringResource { .init(key: "Haptic Feedback", tableName: "Localizable", source: source, developmentValue: "Haptic Feedback", comment: nil) }

      /// en translation: Healthy eating
      ///
      /// Key: HealtyFood
      ///
      /// Locales: en, ru
      var healtyFood: RswiftResources.StringResource { .init(key: "HealtyFood", tableName: "Localizable", source: source, developmentValue: "Healthy eating", comment: nil) }

      /// en translation: Imperial (U.S.)
      ///
      /// Key: Imperial
      ///
      /// Locales: en, ru
      var imperial: RswiftResources.StringResource { .init(key: "Imperial", tableName: "Localizable", source: source, developmentValue: "Imperial (U.S.)", comment: nil) }

      /// en translation: Ingredients
      ///
      /// Key: Ingredients
      ///
      /// Locales: en, ru
      var ingredients: RswiftResources.StringResource { .init(key: "Ingredients", tableName: "Localizable", source: source, developmentValue: "Ingredients", comment: nil) }

      /// en translation: Instructions
      ///
      /// Key: Instructions
      ///
      /// Locales: en, ru
      var instructions: RswiftResources.StringResource { .init(key: "Instructions", tableName: "Localizable", source: source, developmentValue: "Instructions", comment: nil) }

      /// en translation: Loading
      ///
      /// Key: Loading
      ///
      /// Locales: en, ru
      var loading: RswiftResources.StringResource { .init(key: "Loading", tableName: "Localizable", source: source, developmentValue: "Loading", comment: nil) }

      /// en translation: Loading
      ///
      /// Key: Loading info
      ///
      /// Locales: en, ru
      var loadingInfo: RswiftResources.StringResource { .init(key: "Loading info", tableName: "Localizable", source: source, developmentValue: "Loading", comment: nil) }

      /// en translation: Lunch
      ///
      /// Key: Lunch
      ///
      /// Locales: en, ru
      var lunch: RswiftResources.StringResource { .init(key: "Lunch", tableName: "Localizable", source: source, developmentValue: "Lunch", comment: nil) }

      /// en translation: Meat and poultry
      ///
      /// Key: Meat
      ///
      /// Locales: en, ru
      var meat: RswiftResources.StringResource { .init(key: "Meat", tableName: "Localizable", source: source, developmentValue: "Meat and poultry", comment: nil) }

      /// en translation: Metric
      ///
      /// Key: Metric
      ///
      /// Locales: en, ru
      var metric: RswiftResources.StringResource { .init(key: "Metric", tableName: "Localizable", source: source, developmentValue: "Metric", comment: nil) }

      /// en translation: Dairy products
      ///
      /// Key: Milk
      ///
      /// Locales: en, ru
      var milk: RswiftResources.StringResource { .init(key: "Milk", tableName: "Localizable", source: source, developmentValue: "Dairy products", comment: nil) }

      /// en translation: Monthly
      ///
      /// Key: Monthly
      ///
      /// Locales: en, ru
      var monthly: RswiftResources.StringResource { .init(key: "Monthly", tableName: "Localizable", source: source, developmentValue: "Monthly", comment: nil) }

      /// en translation: Most Popular
      ///
      /// Key: MostPopular
      ///
      /// Locales: en, ru
      var mostPopular: RswiftResources.StringResource { .init(key: "MostPopular", tableName: "Localizable", source: source, developmentValue: "Most Popular", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: en, ru
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Localizable", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: Name of the new list...
      ///
      /// Key: NameOfNewList
      ///
      /// Locales: en, ru
      var nameOfNewList: RswiftResources.StringResource { .init(key: "NameOfNewList", tableName: "Localizable", source: source, developmentValue: "Name of the new list...", comment: nil) }

      /// en translation: NewCategory
      ///
      /// Key: NewCategory
      ///
      /// Locales: en, ru
      var newCategory: RswiftResources.StringResource { .init(key: "NewCategory", tableName: "Localizable", source: source, developmentValue: "NewCategory", comment: nil) }

      /// en translation: NEXT     
      ///
      /// Key: Next
      ///
      /// Locales: en, ru
      var next: RswiftResources.StringResource { .init(key: "Next", tableName: "Localizable", source: source, developmentValue: "NEXT     ", comment: nil) }

      /// en translation: No internet connection
      ///
      /// Key: NoInternet
      ///
      /// Locales: en, ru
      var noInternet: RswiftResources.StringResource { .init(key: "NoInternet", tableName: "Localizable", source: source, developmentValue: "No internet connection", comment: nil) }

      /// en translation: Replenished collections of recipes in the app  Write down and organize your recipes
      ///
      /// Key: OrganizeRecepts
      ///
      /// Locales: en, ru
      var organizeRecepts: RswiftResources.StringResource { .init(key: "OrganizeRecepts", tableName: "Localizable", source: source, developmentValue: "Replenished collections of recipes in the app \nWrite down and organize your recipes", comment: nil) }

      /// en translation: List parameters
      ///
      /// Key: Parametrs
      ///
      /// Locales: en, ru
      var parametrs: RswiftResources.StringResource { .init(key: "Parametrs", tableName: "Localizable", source: source, developmentValue: "List parameters", comment: nil) }

      /// en translation: Pick items from another list
      ///
      /// Key: PickFromAnotherList
      ///
      /// Locales: en, ru
      var pickFromAnotherList: RswiftResources.StringResource { .init(key: "PickFromAnotherList", tableName: "Localizable", source: source, developmentValue: "Pick items from another list", comment: nil) }

      /// en translation: Pick items from another list
      ///
      /// Key: PickItem
      ///
      /// Locales: en, ru
      var pickItem: RswiftResources.StringResource { .init(key: "PickItem", tableName: "Localizable", source: source, developmentValue: "Pick items from another list", comment: nil) }

      /// en translation: A problem? Contact us!
      ///
      /// Key: Problems?
      ///
      /// Locales: en, ru
      var problems: RswiftResources.StringResource { .init(key: "Problems?", tableName: "Localizable", source: source, developmentValue: "A problem? Contact us!", comment: nil) }

      /// en translation: Purchased
      ///
      /// Key: Purchased
      ///
      /// Locales: en, ru
      var purchased: RswiftResources.StringResource { .init(key: "Purchased", tableName: "Localizable", source: source, developmentValue: "Purchased", comment: nil) }

      /// en translation: Quantity (optional)
      ///
      /// Key: Quantity
      ///
      /// Locales: en, ru
      var quantity: RswiftResources.StringResource { .init(key: "Quantity", tableName: "Localizable", source: source, developmentValue: "Quantity (optional)", comment: nil) }

      /// en translation: Quantity Units
      ///
      /// Key: Quantity Units
      ///
      /// Locales: en, ru
      var quantityUnits: RswiftResources.StringResource { .init(key: "Quantity Units", tableName: "Localizable", source: source, developmentValue: "Quantity Units", comment: nil) }

      /// en translation: Ready-made food
      ///
      /// Key: ReadyFood
      ///
      /// Locales: en, ru
      var readyFood: RswiftResources.StringResource { .init(key: "ReadyFood", tableName: "Localizable", source: source, developmentValue: "Ready-made food", comment: nil) }

      /// en translation: Recipes
      ///
      /// Key: Recipes
      ///
      /// Locales: en, ru
      var recipes: RswiftResources.StringResource { .init(key: "Recipes", tableName: "Localizable", source: source, developmentValue: "Recipes", comment: nil) }

      /// en translation: Save time and money  with us
      ///
      /// Key: SafeTimeAndMoney
      ///
      /// Locales: en, ru
      var safeTimeAndMoney: RswiftResources.StringResource { .init(key: "SafeTimeAndMoney", tableName: "Localizable", source: source, developmentValue: "Save time and money \nwith us", comment: nil) }

      /// en translation: Save
      ///
      /// Key: Save
      ///
      /// Locales: en, ru
      var save: RswiftResources.StringResource { .init(key: "Save", tableName: "Localizable", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Search in Category
      ///
      /// Key: SearcInCategory
      ///
      /// Locales: en, ru
      var searcInCategory: RswiftResources.StringResource { .init(key: "SearcInCategory", tableName: "Localizable", source: source, developmentValue: "Search in Category", comment: nil) }

      /// en translation: Select list
      ///
      /// Key: Select list
      ///
      /// Locales: en, ru
      var selectList: RswiftResources.StringResource { .init(key: "Select list", tableName: "Localizable", source: source, developmentValue: "Select list", comment: nil) }

      /// en translation: Select сategory
      ///
      /// Key: SelectCategory
      ///
      /// Locales: en, ru
      var selectCategory: RswiftResources.StringResource { .init(key: "SelectCategory", tableName: "Localizable", source: source, developmentValue: "Select сategory", comment: nil) }

      /// en translation: Snacks
      ///
      /// Key: Snacks
      ///
      /// Locales: en, ru
      var snacks: RswiftResources.StringResource { .init(key: "Snacks", tableName: "Localizable", source: source, developmentValue: "Snacks", comment: nil) }

      /// en translation: Supermarket
      ///
      /// Key: Supermarket
      ///
      /// Locales: en, ru
      var supermarket: RswiftResources.StringResource { .init(key: "Supermarket", tableName: "Localizable", source: source, developmentValue: "Supermarket", comment: nil) }

      /// en translation: Sweets
      ///
      /// Key: Sweet
      ///
      /// Locales: en, ru
      var sweet: RswiftResources.StringResource { .init(key: "Sweet", tableName: "Localizable", source: source, developmentValue: "Sweets", comment: nil) }

      /// en translation: Synchronize lists with relatives and friends.
      ///
      /// Key: Synchronize
      ///
      /// Locales: en, ru
      var synchronize: RswiftResources.StringResource { .init(key: "Synchronize", tableName: "Localizable", source: source, developmentValue: "Synchronize lists with relatives and friends.", comment: nil) }

      /// en translation: Tea and coffee
      ///
      /// Key: Tea
      ///
      /// Locales: en, ru
      var tea: RswiftResources.StringResource { .init(key: "Tea", tableName: "Localizable", source: source, developmentValue: "Tea and coffee", comment: nil) }

      /// en translation: Warning
      ///
      /// Key: Warning
      ///
      /// Locales: en, ru
      var warning: RswiftResources.StringResource { .init(key: "Warning", tableName: "Localizable", source: source, developmentValue: "Warning", comment: nil) }

      /// en translation: Cuisines of the world
      ///
      /// Key: WorldCitchen
      ///
      /// Locales: en, ru
      var worldCitchen: RswiftResources.StringResource { .init(key: "WorldCitchen", tableName: "Localizable", source: source, developmentValue: "Cuisines of the world", comment: nil) }

      /// en translation: bottle
      ///
      /// Key: bottle
      ///
      /// Locales: en, ru
      var bottle: RswiftResources.StringResource { .init(key: "bottle", tableName: "Localizable", source: source, developmentValue: "bottle", comment: nil) }

      /// en translation: by taste
      ///
      /// Key: by taste
      ///
      /// Locales: en, ru
      var byTaste: RswiftResources.StringResource { .init(key: "by taste", tableName: "Localizable", source: source, developmentValue: "by taste", comment: nil) }

      /// en translation: Alphabetically
      ///
      /// Key: byAlphabet
      ///
      /// Locales: en, ru
      var byAlphabet: RswiftResources.StringResource { .init(key: "byAlphabet", tableName: "Localizable", source: source, developmentValue: "Alphabetically", comment: nil) }

      /// en translation: By category
      ///
      /// Key: byCategory
      ///
      /// Locales: en, ru
      var byCategory: RswiftResources.StringResource { .init(key: "byCategory", tableName: "Localizable", source: source, developmentValue: "By category", comment: nil) }

      /// en translation: By time
      ///
      /// Key: byTime
      ///
      /// Locales: en, ru
      var byTime: RswiftResources.StringResource { .init(key: "byTime", tableName: "Localizable", source: source, developmentValue: "By time", comment: nil) }

      /// en translation: can
      ///
      /// Key: can
      ///
      /// Locales: en, ru
      var can: RswiftResources.StringResource { .init(key: "can", tableName: "Localizable", source: source, developmentValue: "can", comment: nil) }

      /// en translation: ChangeColor
      ///
      /// Key: changeColor
      ///
      /// Locales: en, ru
      var changeColor: RswiftResources.StringResource { .init(key: "changeColor", tableName: "Localizable", source: source, developmentValue: "ChangeColor", comment: nil) }

      /// en translation: Save to Photo
      ///
      /// Key: copy
      ///
      /// Locales: en, ru
      var copy: RswiftResources.StringResource { .init(key: "copy", tableName: "Localizable", source: source, developmentValue: "Save to Photo", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: delete
      ///
      /// Locales: en, ru
      var delete: RswiftResources.StringResource { .init(key: "delete", tableName: "Localizable", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: fl oz
      ///
      /// Key: fluidOz
      ///
      /// Locales: en, ru
      var fluidOz: RswiftResources.StringResource { .init(key: "fluidOz", tableName: "Localizable", source: source, developmentValue: "fl oz", comment: nil) }

      /// en translation: g
      ///
      /// Key: gram
      ///
      /// Locales: en, ru
      var gram: RswiftResources.StringResource { .init(key: "gram", tableName: "Localizable", source: source, developmentValue: "g", comment: nil) }

      /// en translation: kg
      ///
      /// Key: kilogram
      ///
      /// Locales: en, ru
      var kilogram: RswiftResources.StringResource { .init(key: "kilogram", tableName: "Localizable", source: source, developmentValue: "kg", comment: nil) }

      /// en translation: lb
      ///
      /// Key: lbс
      ///
      /// Locales: en, ru
      var lbс: RswiftResources.StringResource { .init(key: "lbс", tableName: "Localizable", source: source, developmentValue: "lb", comment: nil) }

      /// en translation: L
      ///
      /// Key: liter
      ///
      /// Locales: en, ru
      var liter: RswiftResources.StringResource { .init(key: "liter", tableName: "Localizable", source: source, developmentValue: "L", comment: nil) }

      /// en translation: mL
      ///
      /// Key: mililiter
      ///
      /// Locales: en, ru
      var mililiter: RswiftResources.StringResource { .init(key: "mililiter", tableName: "Localizable", source: source, developmentValue: "mL", comment: nil) }

      /// en translation: min
      ///
      /// Key: min
      ///
      /// Locales: en, ru
      var min: RswiftResources.StringResource { .init(key: "min", tableName: "Localizable", source: source, developmentValue: "min", comment: nil) }

      /// en translation: Other
      ///
      /// Key: other
      ///
      /// Locales: en, ru
      var other: RswiftResources.StringResource { .init(key: "other", tableName: "Localizable", source: source, developmentValue: "Other", comment: nil) }

      /// en translation: oz
      ///
      /// Key: ozz
      ///
      /// Locales: en, ru
      var ozz: RswiftResources.StringResource { .init(key: "ozz", tableName: "Localizable", source: source, developmentValue: "oz", comment: nil) }

      /// en translation: pack
      ///
      /// Key: pack
      ///
      /// Locales: en, ru
      var pack: RswiftResources.StringResource { .init(key: "pack", tableName: "Localizable", source: source, developmentValue: "pack", comment: nil) }

      /// en translation: pc
      ///
      /// Key: piece
      ///
      /// Locales: en, ru
      var piece: RswiftResources.StringResource { .init(key: "piece", tableName: "Localizable", source: source, developmentValue: "pc", comment: nil) }

      /// en translation: pieces
      ///
      /// Key: pieces
      ///
      /// Locales: en, ru
      var pieces: RswiftResources.StringResource { .init(key: "pieces", tableName: "Localizable", source: source, developmentValue: "pieces", comment: nil) }

      /// en translation: Fix
      ///
      /// Key: pinch
      ///
      /// Locales: en, ru
      var pinch: RswiftResources.StringResource { .init(key: "pinch", tableName: "Localizable", source: source, developmentValue: "Fix", comment: nil) }

      /// en translation: Настройки
      ///
      /// Key: preferencies
      ///
      /// Locales: en, ru
      var preferencies: RswiftResources.StringResource { .init(key: "preferencies", tableName: "Localizable", source: source, developmentValue: "Настройки", comment: nil) }

      /// en translation: Print
      ///
      /// Key: print
      ///
      /// Locales: en, ru
      var print: RswiftResources.StringResource { .init(key: "print", tableName: "Localizable", source: source, developmentValue: "Print", comment: nil) }

      /// en translation: pt
      ///
      /// Key: pt
      ///
      /// Locales: en, ru
      var pt: RswiftResources.StringResource { .init(key: "pt", tableName: "Localizable", source: source, developmentValue: "pt", comment: nil) }

      /// en translation: Rename
      ///
      /// Key: rename
      ///
      /// Locales: en, ru
      var rename: RswiftResources.StringResource { .init(key: "rename", tableName: "Localizable", source: source, developmentValue: "Rename", comment: nil) }

      /// en translation: Select All
      ///
      /// Key: selectAll
      ///
      /// Locales: en, ru
      var selectAll: RswiftResources.StringResource { .init(key: "selectAll", tableName: "Localizable", source: source, developmentValue: "Select All", comment: nil) }

      /// en translation: Send
      ///
      /// Key: send
      ///
      /// Locales: en, ru
      var send: RswiftResources.StringResource { .init(key: "send", tableName: "Localizable", source: source, developmentValue: "Send", comment: nil) }

      /// en translation: servings
      ///
      /// Key: servings
      ///
      /// Locales: en, ru
      var servings: RswiftResources.StringResource { .init(key: "servings", tableName: "Localizable", source: source, developmentValue: "servings", comment: nil) }

      /// en translation: serving
      ///
      /// Key: servings-1
      ///
      /// Locales: en, ru
      var servings1: RswiftResources.StringResource { .init(key: "servings-1", tableName: "Localizable", source: source, developmentValue: "serving", comment: nil) }

      /// en translation: servings
      ///
      /// Key: servings-2-4
      ///
      /// Locales: en, ru
      var servings24: RswiftResources.StringResource { .init(key: "servings-2-4", tableName: "Localizable", source: source, developmentValue: "servings", comment: nil) }

      /// en translation: servings
      ///
      /// Key: servings>4
      ///
      /// Locales: en, ru
      var servings4: RswiftResources.StringResource { .init(key: "servings>4", tableName: "Localizable", source: source, developmentValue: "servings", comment: nil) }

      /// en translation: Sort
      ///
      /// Key: sort
      ///
      /// Locales: en, ru
      var sort: RswiftResources.StringResource { .init(key: "sort", tableName: "Localizable", source: source, developmentValue: "Sort", comment: nil) }

      /// en translation: Today
      ///
      /// Key: today
      ///
      /// Locales: en, ru
      var today: RswiftResources.StringResource { .init(key: "today", tableName: "Localizable", source: source, developmentValue: "Today", comment: nil) }

      /// en translation: week
      ///
      /// Key: weekly
      ///
      /// Locales: en, ru
      var weekly: RswiftResources.StringResource { .init(key: "weekly", tableName: "Localizable", source: source, developmentValue: "week", comment: nil) }

      /// en translation: Yearly
      ///
      /// Key: yearly
      ///
      /// Locales: en, ru
      var yearly: RswiftResources.StringResource { .init(key: "yearly", tableName: "Localizable", source: source, developmentValue: "Yearly", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 95 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `#addImage`.
    var addImage: RswiftResources.ImageResource { .init(name: "#addImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#arrowLeft`.
    var arrowLeft: RswiftResources.ImageResource { .init(name: "#arrowLeft", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#arrowRigth`.
    var arrowRigth: RswiftResources.ImageResource { .init(name: "#arrowRigth", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#checkmark`.
    var checkmark: RswiftResources.ImageResource { .init(name: "#checkmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#hand`.
    var hand: RswiftResources.ImageResource { .init(name: "#hand", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#play`.
    var play: RswiftResources.ImageResource { .init(name: "#play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#plusImage`.
    var plusImage: RswiftResources.ImageResource { .init(name: "#plusImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#reciept`.
    var reciept: RswiftResources.ImageResource { .init(name: "#reciept", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `#whiteCross`.
    var whiteCross: RswiftResources.ImageResource { .init(name: "#whiteCross", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ABC`.
    var abC: RswiftResources.ImageResource { .init(name: "ABC", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Category`.
    var category: RswiftResources.ImageResource { .init(name: "Category", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Color`.
    var color: RswiftResources.ImageResource { .init(name: "Color", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Copy`.
    var copy: RswiftResources.ImageResource { .init(name: "Copy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FolderIcon`.
    var folderIcon: RswiftResources.ImageResource { .init(name: "FolderIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Pin`.
    var pin: RswiftResources.ImageResource { .init(name: "Pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Print`.
    var print: RswiftResources.ImageResource { .init(name: "Print", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Rename`.
    var rename: RswiftResources.ImageResource { .init(name: "Rename", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Send`.
    var send: RswiftResources.ImageResource { .init(name: "Send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Sort`.
    var sort: RswiftResources.ImageResource { .init(name: "Sort", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Time`.
    var time: RswiftResources.ImageResource { .init(name: "Time", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addItemImage`.
    var addItemImage: RswiftResources.ImageResource { .init(name: "addItemImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addToCart`.
    var addToCart: RswiftResources.ImageResource { .init(name: "addToCart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addToCartFilled`.
    var addToCartFilled: RswiftResources.ImageResource { .init(name: "addToCartFilled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addToFavSelected`.
    var addToFavSelected: RswiftResources.ImageResource { .init(name: "addToFavSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addToFavUnselected`.
    var addToFavUnselected: RswiftResources.ImageResource { .init(name: "addToFavUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `basket`.
    var basket: RswiftResources.ImageResource { .init(name: "basket", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cart`.
    var cart: RswiftResources.ImageResource { .init(name: "cart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cellCheckmark`.
    var cellCheckmark: RswiftResources.ImageResource { .init(name: "cellCheckmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevronRight`.
    var chevronRight: RswiftResources.ImageResource { .init(name: "chevronRight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `closeButtonCross`.
    var closeButtonCross: RswiftResources.ImageResource { .init(name: "closeButtonCross", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `collectionsAlarmImage`.
    var collectionsAlarmImage: RswiftResources.ImageResource { .init(name: "collectionsAlarmImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `contextMenu`.
    var contextMenu: RswiftResources.ImageResource { .init(name: "contextMenu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `contextualMenu`.
    var contextualMenu: RswiftResources.ImageResource { .init(name: "contextualMenu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emptyCheckmark`.
    var emptyCheckmark: RswiftResources.ImageResource { .init(name: "emptyCheckmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fifthBG`.
    var fifthBG: RswiftResources.ImageResource { .init(name: "fifthBG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fifthBGBlur`.
    var fifthBGBlur: RswiftResources.ImageResource { .init(name: "fifthBGBlur", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fifthSideView`.
    var fifthSideView: RswiftResources.ImageResource { .init(name: "fifthSideView", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstBG`.
    var firstBG: RswiftResources.ImageResource { .init(name: "firstBG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstBackgroundBlur`.
    var firstBackgroundBlur: RswiftResources.ImageResource { .init(name: "firstBackgroundBlur", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstScreen`.
    var firstScreen: RswiftResources.ImageResource { .init(name: "firstScreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstSideView`.
    var firstSideView: RswiftResources.ImageResource { .init(name: "firstSideView", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `foodImage`.
    var foodImage: RswiftResources.ImageResource { .init(name: "foodImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `forthBG`.
    var forthBG: RswiftResources.ImageResource { .init(name: "forthBG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `forthBGBlur`.
    var forthBGBlur: RswiftResources.ImageResource { .init(name: "forthBGBlur", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `forthScreen`.
    var forthScreen: RswiftResources.ImageResource { .init(name: "forthScreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `forthSideView`.
    var forthSideView: RswiftResources.ImageResource { .init(name: "forthSideView", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenArrowBack`.
    var greenArrowBack: RswiftResources.ImageResource { .init(name: "greenArrowBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenCart`.
    var greenCart: RswiftResources.ImageResource { .init(name: "greenCart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenCheckmark`.
    var greenCheckmark: RswiftResources.ImageResource { .init(name: "greenCheckmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenCross`.
    var greenCross: RswiftResources.ImageResource { .init(name: "greenCross", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenLoopImage`.
    var greenLoopImage: RswiftResources.ImageResource { .init(name: "greenLoopImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenPinchImage`.
    var greenPinchImage: RswiftResources.ImageResource { .init(name: "greenPinchImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `greenPlus`.
    var greenPlus: RswiftResources.ImageResource { .init(name: "greenPlus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `halfFood`.
    var halfFood: RswiftResources.ImageResource { .init(name: "halfFood", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo`.
    var logo: RswiftResources.ImageResource { .init(name: "logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logoShoppy`.
    var logoShoppy: RswiftResources.ImageResource { .init(name: "logoShoppy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `minusActive`.
    var minusActive: RswiftResources.ImageResource { .init(name: "minusActive", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `minusButton`.
    var minusButton: RswiftResources.ImageResource { .init(name: "minusButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `minusInactive`.
    var minusInactive: RswiftResources.ImageResource { .init(name: "minusInactive", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `nextArrow`.
    var nextArrow: RswiftResources.ImageResource { .init(name: "nextArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paywallBackground`.
    var paywallBackground: RswiftResources.ImageResource { .init(name: "paywallBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phoneShadow`.
    var phoneShadow: RswiftResources.ImageResource { .init(name: "phoneShadow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pickImage`.
    var pickImage: RswiftResources.ImageResource { .init(name: "pickImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pinchImage`.
    var pinchImage: RswiftResources.ImageResource { .init(name: "pinchImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plusActive`.
    var plusActive: RswiftResources.ImageResource { .init(name: "plusActive", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plusButton`.
    var plusButton: RswiftResources.ImageResource { .init(name: "plusButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plusInactive`.
    var plusInactive: RswiftResources.ImageResource { .init(name: "plusInactive", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `productShelf`.
    var productShelf: RswiftResources.ImageResource { .init(name: "productShelf", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profileImage`.
    var profileImage: RswiftResources.ImageResource { .init(name: "profileImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `purchasedCheckmark`.
    var purchasedCheckmark: RswiftResources.ImageResource { .init(name: "purchasedCheckmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `redDeleteImage`.
    var redDeleteImage: RswiftResources.ImageResource { .init(name: "redDeleteImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rightChevronGreen`.
    var rightChevronGreen: RswiftResources.ImageResource { .init(name: "rightChevronGreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchButtonImage`.
    var searchButtonImage: RswiftResources.ImageResource { .init(name: "searchButtonImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `secondBG`.
    var secondBG: RswiftResources.ImageResource { .init(name: "secondBG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `secondBGBlur`.
    var secondBGBlur: RswiftResources.ImageResource { .init(name: "secondBGBlur", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `secondScreen`.
    var secondScreen: RswiftResources.ImageResource { .init(name: "secondScreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `secondSideView`.
    var secondSideView: RswiftResources.ImageResource { .init(name: "secondSideView", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settingsButtonImage`.
    var settingsButtonImage: RswiftResources.ImageResource { .init(name: "settingsButtonImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shareAvatar`.
    var shareAvatar: RswiftResources.ImageResource { .init(name: "shareAvatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shareIcon`.
    var shareIcon: RswiftResources.ImageResource { .init(name: "shareIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sharedAlarmImage`.
    var sharedAlarmImage: RswiftResources.ImageResource { .init(name: "sharedAlarmImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sheckmarkForSorting`.
    var sheckmarkForSorting: RswiftResources.ImageResource { .init(name: "sheckmarkForSorting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `swipeTeDeleteFromFavorite`.
    var swipeTeDeleteFromFavorite: RswiftResources.ImageResource { .init(name: "swipeTeDeleteFromFavorite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `swipeToAddToFavorite`.
    var swipeToAddToFavorite: RswiftResources.ImageResource { .init(name: "swipeToAddToFavorite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `swipeToDelete`.
    var swipeToDelete: RswiftResources.ImageResource { .init(name: "swipeToDelete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thirdBG`.
    var thirdBG: RswiftResources.ImageResource { .init(name: "thirdBG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thirdBGBlur`.
    var thirdBGBlur: RswiftResources.ImageResource { .init(name: "thirdBGBlur", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thirdScreen`.
    var thirdScreen: RswiftResources.ImageResource { .init(name: "thirdScreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thirdSideView`.
    var thirdSideView: RswiftResources.ImageResource { .init(name: "thirdSideView", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `timerIcon`.
    var timerIcon: RswiftResources.ImageResource { .init(name: "timerIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `vectorArrow`.
    var vectorArrow: RswiftResources.ImageResource { .init(name: "vectorArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `whiteArrowRight`.
    var whiteArrowRight: RswiftResources.ImageResource { .init(name: "whiteArrowRight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `whiteCheckmark`.
    var whiteCheckmark: RswiftResources.ImageResource { .init(name: "whiteCheckmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `whitePencil`.
    var whitePencil: RswiftResources.ImageResource { .init(name: "whitePencil", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `whitePlusImage`.
    var whitePlusImage: RswiftResources.ImageResource { .init(name: "whitePlusImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `SFProDisplay-Bold`.
    var sfProDisplayBold: RswiftResources.FontResource { .init(name: "SFProDisplay-Bold", bundle: bundle, filename: "SF Pro Display Bold.otf") }

    /// Font `SFProDisplay-Heavy`.
    var sfProDisplayHeavy: RswiftResources.FontResource { .init(name: "SFProDisplay-Heavy", bundle: bundle, filename: "SF Pro Display Heavy.otf") }

    /// Font `SFProDisplay-Medium`.
    var sfProDisplayMedium: RswiftResources.FontResource { .init(name: "SFProDisplay-Medium", bundle: bundle, filename: "SF Pro Display Medium.otf") }

    /// Font `SFProDisplay-Regular`.
    var sfProDisplayRegular: RswiftResources.FontResource { .init(name: "SFProDisplay-Regular", bundle: bundle, filename: "SF Pro Display Regular.otf") }

    /// Font `SFProDisplay-Semibold`.
    var sfProDisplaySemibold: RswiftResources.FontResource { .init(name: "SFProDisplay-Semibold", bundle: bundle, filename: "SF Pro Display Semibold.otf") }

    /// Font `SFProRounded-Bold`.
    var sfProRoundedBold: RswiftResources.FontResource { .init(name: "SFProRounded-Bold", bundle: bundle, filename: "SFProRounded-Bold.otf") }

    /// Font `SFProText-Medium`.
    var sfProTextMedium: RswiftResources.FontResource { .init(name: "SFProText-Medium", bundle: bundle, filename: "SFProText-Medium.ttf") }

    /// Font `SFProText-Semibold`.
    var sfProTextSemibold: RswiftResources.FontResource { .init(name: "SFProText-Semibold", bundle: bundle, filename: "SFProText-Semibold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [sfProDisplayBold, sfProDisplayHeavy, sfProDisplayMedium, sfProDisplayRegular, sfProDisplaySemibold, sfProRoundedBold, sfProTextMedium, sfProTextSemibold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 8 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `SF Pro Display Bold.otf`.
    var sfProDisplayBoldOtf: RswiftResources.FileResource { .init(name: "SF Pro Display Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF Pro Display Heavy.otf`.
    var sfProDisplayHeavyOtf: RswiftResources.FileResource { .init(name: "SF Pro Display Heavy", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF Pro Display Medium.otf`.
    var sfProDisplayMediumOtf: RswiftResources.FileResource { .init(name: "SF Pro Display Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF Pro Display Regular.otf`.
    var sfProDisplayRegularOtf: RswiftResources.FileResource { .init(name: "SF Pro Display Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF Pro Display Semibold.otf`.
    var sfProDisplaySemiboldOtf: RswiftResources.FileResource { .init(name: "SF Pro Display Semibold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFProRounded-Bold.otf`.
    var sfProRoundedBoldOtf: RswiftResources.FileResource { .init(name: "SFProRounded-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFProText-Medium.ttf`.
    var sfProTextMediumTtf: RswiftResources.FileResource { .init(name: "SFProText-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SFProText-Semibold.ttf`.
    var sfProTextSemiboldTtf: RswiftResources.FileResource { .init(name: "SFProText-Semibold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}